There is a file where every line is a word or concatenated word. First, I need to parse
 the file and get a collection of Strings. The order is not significant, operations will be insert
 and select (not at index), so I should use LinkedList.

I need to count all concatenated words, so I probably will have to clone this collection
 and have ~n^2 compare operations. While iterating, I should check is this word is concatenated.
 If it is, I should put it in a separate collection. I shall also save 2 longest concatenated words in it.

One string can be concatenated with many different strings, so I should count only unique strings.
 Set is a good collection for this purposes.

The output - total amount of concatenated words + longest and second longest words are written through log4j logger into console. If needed,
 logger can be set to output date into a file.

And then I noticed...
 Note section.......

So I have to find all unique words (not-concatenated). Take a list of all words, delete all unique words
 and recursively go through every word. If potentially concatenated word fully composed with words from
 the list of unique words - then it is concatenated.

My problem was - concatenated words can consist of other concatenated words and simple words as well. I didn't take that is count.
The other thing I realized - I was cutting possibilities. I.E. if I had word aabac, and there is a word aa in list, I looked at word bac ->
 if it was not concatenated, I considered word aabac not concatenated. But there may be words aab and ac...

So, after making all fixed, this is what I got:

    Longest word    - ethylenediaminetetraacetates - 28 symb
    Second longest  - electroencephalographically  - 27 symb
    Total amount    - 97107
    Time to process - 909 seconds
